#! /usr/bin/env ruby

require 'tdd'

# The majority of this file has been adapted from Ara Howard's rego gem.
# You can find the source here: http://github.com/ahoward/rego.

Main {

  name <<-__

tdd

  __

  description <<-__

tdd watches files and runs test/unit or rspec tests when they change.
  __

  examples <<-__
Use with test/unit:

    $ tdd test/unit/some_unit_test.rb

Use with rspec:

    $ tdd spec/some_spec.rb
    # Run all specs
    $ tdd spec

Use with rake:

    $ tdd rake test:functional
    $ tdd rake spec

You can pass arguments you would normally pass to `ruby -Itest` or `rspec`
  
    $ tdd -- test/unit/some_unit_test.rb -n /some_test_name/
    $ tdd -- spec/some_spec.rb:42 --fail-fast

By default, tdd will glob for files that match your test file and run your test
command if any file being watched changes.

    $ tdd test/unit/some_class_test.rb
    Running: ruby -I test test/unit/some_class_test.rb
    Watching:
    /Users/ubermajestix/work/awesome_app/lib/some_class.rb
    /Users/ubermajestix/work/awesome_app/test/unit/some_class_test.rb
    ##########################################

You can specify additional files to watch (note the double dashes `--`
separating the files to watch from the test file and options):

    $ tdd lib/other_class.rb config/setup.rb -- test/unit/some_class_test.rb -n/some_test_name/
    Running: ruby -I test test/unit/some_class_test.rb -n/some_test_name/
    Watching:
    /Users/ubermajestix/work/awesome_app/config/setup.rb
    /Users/ubermajestix/work/awesome_app/lib/some_class.rb
    /Users/ubermajestix/work/awesome_app/lib/other_class.rb
    /Users/ubermajestix/work/awesome_app/test/unit/some_class_test.rb
    ##########################################


In a Rails project you can ask tdd to watch view and controller files
related to a functional or controller test:

    $ tdd controller -- spec/controllers/users_controller_spec.rb
    Running: rspec spec/controllers/users_controller_spec.rb
    Watching:
    /Users/ubermajestix/work/awesome_rails_app/app/controllers/users_controller.rb
    /Users/ubermajestix/work/awesome_rails_app/app/views/index.html.erb
    /Users/ubermajestix/work/awesome_rails_app/app/views/show.html.erb
    /Users/ubermajestix/work/awesome_rails_app/app/views/edit.html.erb
    /Users/ubermajestix/work/awesome_rails_app/app/views/_fields.html.erb
    /Users/ubermajestix/work/awesome_rails_app/spec/controllers/users_controller_spec.rb
    ##########################################


  __

  option('gitignore'){
    argument :required
    default true
    cast :boolean
    description "Don't watch files/dirs if they are ignored by git. Defaults to true."
  }

  def run
    print_usage_and_exit if ARGV.empty?
    parse_options
    parse_the_command_line
    print_a_summary_of_watched_files
    loop_watching_files_and_running_commands
  end

  def print_usage_and_exit
    puts usage['examples']
    exit 1
  end

  def parse_options
    @gitignore = params['gitignore'].value
    ARGV.delete_if{|arg| arg =~ /--gitignore.*/}
  end

  def parse_the_command_line
    @paths, @command = Tdd::CommandLineParser.parse
    @paths = %w[.] if @paths.empty?
    expand_all_file_paths_in_array(@paths)
    
    if @gitignore
      say("ignoring gitignore files...", :color => :yellow)
      @paths = @paths - git_ignored
    end
  end

  def git_ignored
    @all_git_ignored ||= %w(~/.gitignore_global .gitignore).reduce([]) do |all_ignored, file| 
      if File.exists?(file = File.expand_path(file))
        all_ignored += Pathname.new(file).read.split("\n").reject{|i| i =~ /^#.*|(^\s*$)/}
      end
      all_ignored
    end
    expand_all_file_paths_in_array(@all_git_ignored)
  end

  def expand_all_file_paths_in_array(paths)
    paths.map! do |path| 
      if test(?d, path) 
        [path, Dir.glob(File.join(path, '**/**'))] 
      elsif path =~ /\*/
        Dir.glob(path)
      else
        path
      end
    end
    paths.flatten!
    paths.compact!
    paths.uniq!
    paths.map! do |path|
      begin
        Pathname.new(path).realpath.to_s
      rescue Object
        nil
      end
    end
    paths.compact!
    paths
  end

  def print_a_summary_of_watched_files
    puts "Running: #{ @command }"
    if @paths.length > 25
       current_dir = Dir.pwd
       dirs = @paths.map{|p| p.gsub(Dir.pwd + "/", '').split('/').first + "/"}.uniq
       puts "Watching #{@paths.length} files in #{dirs.join(' ')}"
    else
      puts "Watching:"
      puts @paths.join("\n")
    end
  end

  def loop_watching_files_and_running_commands
    directories = []
    files = []
    @paths.each do |path|
      if test(?d, path)
        directories.push(path)
      else
        files.push(path)
        directories.push(File.dirname(path))
      end
    end
    directories.uniq!
    files.uniq!
    stats = {} 

    files.each do |file|
      begin
        stats[file] = File.stat(file)
      rescue
        nil
      end
    end
    fsevent = FSEvent.new

    n = '0'
    line = '#' * 42
    $running = false

    tdd = proc do |files|
      puts line
      say("# starting test run #{ n } @ #{ Time.now.strftime('%H:%M:%S') } - #{ @command }", :color => :magenta)
      say("# #{files.size > 1 ? 'files' : 'file'} changed: #{files.join(', ')}", :color => :magenta) if files && files.any?
      puts
      tests_pass = system(@command)
      puts
      say("# finished test run #{ n } @ #{ Time.now.strftime('%H:%M:%S') } - #{ $?.exitstatus }", :color => :yellow)
      if tests_pass
        system("command -v blink1-tool > /dev/null && blink1-tool -d0 --rgb 0,255,0 --blink 3 > /dev/null &")
      else
        system("command -v blink1-tool > /dev/null && blink1-tool -d0 --rgb 255,0,0 --blink 3 > /dev/null &")
      end
      puts
      n.succ!
    end

    tdd.call

    fsevent.watch(directories) do |*args|
      entries_changed = []
      unless $running
        $running = true
        args.flatten.each do |dir|
          glob = File.join(dir, '**/**')
          entries = Dir.glob(glob)

          entries.each do |entry|
            entry = File.expand_path(entry)
            next unless stats.has_key?(entry)

            begin
              stats[entry] ||= File.stat(entry)
              before = stats[entry]
              after = File.stat(entry)
            rescue
              next
            end
            unless before.mtime == after.mtime
              stats[entry] = after
              entries_changed << entry
            end
          end
        end
      end
      tdd.call(entries_changed) if entries_changed.any?
      $running = false
    end

    fsevent.run
  end
}


BEGIN {
  ANSI = {
    :clear      => "\e[0m",
    :reset      => "\e[0m",
    :erase_line => "\e[K",
    :erase_char => "\e[P",
    :bold       => "\e[1m",
    :dark       => "\e[2m",
    :underline  => "\e[4m",
    :underscore => "\e[4m",
    :blink      => "\e[5m",
    :reverse    => "\e[7m",
    :concealed  => "\e[8m",
    :black      => "\e[30m",
    :red        => "\e[31m",
    :green      => "\e[32m",
    :yellow     => "\e[33m",
    :blue       => "\e[34m",
    :magenta    => "\e[35m",
    :cyan       => "\e[36m",
    :white      => "\e[37m",
    :on_black   => "\e[40m",
    :on_red     => "\e[41m",
    :on_green   => "\e[42m",
    :on_yellow  => "\e[43m",
    :on_blue    => "\e[44m",
    :on_magenta => "\e[45m",
    :on_cyan    => "\e[46m",
    :on_white   => "\e[47m"
  }

  module Kernel
  private
    def say(phrase, *args)
      options = args.last.is_a?(Hash) ? args.pop : {}
      options[:color] = args.shift.to_s.to_sym unless args.empty?
      keys = options.keys
      keys.each{|key| options[key.to_s.to_sym] = options.delete(key)}

      color = options[:color]
      bold = options.has_key?(:bold)

      parts = [phrase]

      if STDOUT.tty?
        parts.unshift(ANSI[color]) if color
        parts.unshift(ANSI[:bold]) if bold
        parts.push(ANSI[:clear]) if parts.size > 1
      end

      method = options[:method] || :puts

      send(method, parts.join)
    end
  end
}

